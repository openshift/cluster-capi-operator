package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_DelegatedAuthentication = map[string]string{
	"":         "DelegatedAuthentication allows authentication to be disabled.",
	"disabled": "disabled indicates that authentication should be disabled.  By default it will use delegated authentication.",
}

func (DelegatedAuthentication) SwaggerDoc() map[string]string {
	return map_DelegatedAuthentication
}

var map_DelegatedAuthorization = map[string]string{
	"":         "DelegatedAuthorization allows authorization to be disabled.",
	"disabled": "disabled indicates that authorization should be disabled.  By default it will use delegated authorization.",
}

func (DelegatedAuthorization) SwaggerDoc() map[string]string {
	return map_DelegatedAuthorization
}

var map_GenerationHistory = map[string]string{
	"":               "GenerationHistory keeps track of the generation for a given resource so that decisions about forced updated can be made. DEPRECATED: Use fields in v1.GenerationStatus instead",
	"group":          "group is the group of the thing you're tracking",
	"resource":       "resource is the resource type of the thing you're tracking",
	"namespace":      "namespace is where the thing you're tracking is",
	"name":           "name is the name of the thing you're tracking",
	"lastGeneration": "lastGeneration is the last generation of the workload controller involved",
}

func (GenerationHistory) SwaggerDoc() map[string]string {
	return map_GenerationHistory
}

var map_GenericOperatorConfig = map[string]string{
	"":               "GenericOperatorConfig provides information to configure an operator\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"servingInfo":    "servingInfo is the HTTP serving information for the controller's endpoints",
	"leaderElection": "leaderElection provides information to elect a leader. Only override this if you have a specific need",
	"authentication": "authentication allows configuration of authentication for the endpoints",
	"authorization":  "authorization allows configuration of authentication for the endpoints",
}

func (GenericOperatorConfig) SwaggerDoc() map[string]string {
	return map_GenericOperatorConfig
}

var map_LoggingConfig = map[string]string{
	"":        "LoggingConfig holds information about configuring logging DEPRECATED: Use v1.LogLevel instead",
	"level":   "level is passed to glog.",
	"vmodule": "vmodule is passed to glog.",
}

func (LoggingConfig) SwaggerDoc() map[string]string {
	return map_LoggingConfig
}

var map_NodeStatus = map[string]string{
	"":                               "NodeStatus provides information about the current state of a particular node managed by this operator. Deprecated: Use v1.NodeStatus instead",
	"nodeName":                       "nodeName is the name of the node",
	"currentDeploymentGeneration":    "currentDeploymentGeneration is the generation of the most recently successful deployment",
	"targetDeploymentGeneration":     "targetDeploymentGeneration is the generation of the deployment we're trying to apply",
	"lastFailedDeploymentGeneration": "lastFailedDeploymentGeneration is the generation of the deployment we tried and failed to deploy.",
	"lastFailedDeploymentErrors":     "lastFailedDeploymentGenerationErrors is a list of the errors during the failed deployment referenced in lastFailedDeploymentGeneration",
}

func (NodeStatus) SwaggerDoc() map[string]string {
	return map_NodeStatus
}

var map_OperatorCondition = map[string]string{
	"": "OperatorCondition is just the standard condition fields. DEPRECATED: Use v1.OperatorCondition instead",
}

func (OperatorCondition) SwaggerDoc() map[string]string {
	return map_OperatorCondition
}

var map_OperatorSpec = map[string]string{
	"":                "OperatorSpec contains common fields for an operator to need.  It is intended to be anonymous included inside of the Spec struct for you particular operator. DEPRECATED: Use v1.OperatorSpec instead",
	"managementState": "managementState indicates whether and how the operator should manage the component",
	"imagePullSpec":   "imagePullSpec is the image to use for the component.",
	"imagePullPolicy": "imagePullPolicy specifies the image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.",
	"version":         "version is the desired state in major.minor.micro-patch.  Usually patch is ignored.",
	"logging":         "logging contains glog parameters for the component pods.  It's always a command line arg for the moment",
}

func (OperatorSpec) SwaggerDoc() map[string]string {
	return map_OperatorSpec
}

var map_OperatorStatus = map[string]string{
	"":                           "OperatorStatus contains common fields for an operator to need.  It is intended to be anonymous included inside of the Status struct for you particular operator. DEPRECATED: Use v1.OperatorStatus instead",
	"observedGeneration":         "observedGeneration is the last generation change you've dealt with",
	"conditions":                 "conditions is a list of conditions and their status",
	"state":                      "state indicates what the operator has observed to be its current operational status.",
	"taskSummary":                "taskSummary is a high level summary of what the controller is currently attempting to do.  It is high-level, human-readable and not guaranteed in any way. (I needed this for debugging and realized it made a great summary).",
	"currentVersionAvailability": "currentVersionAvailability is availability information for the current version.  If it is unmanged or removed, this doesn't exist.",
	"targetVersionAvailability":  "targetVersionAvailability is availability information for the target version if we are migrating",
}

func (OperatorStatus) SwaggerDoc() map[string]string {
	return map_OperatorStatus
}

var map_StaticPodOperatorStatus = map[string]string{
	"":                                    "StaticPodOperatorStatus is status for controllers that manage static pods.  There are different needs because individual node status must be tracked. DEPRECATED: Use v1.StaticPodOperatorStatus instead",
	"latestAvailableDeploymentGeneration": "latestAvailableDeploymentGeneration is the deploymentID of the most recent deployment",
	"nodeStatuses":                        "nodeStatuses track the deployment values and errors across individual nodes",
}

func (StaticPodOperatorStatus) SwaggerDoc() map[string]string {
	return map_StaticPodOperatorStatus
}

var map_VersionAvailability = map[string]string{
	"":                "VersionAvailability gives information about the synchronization and operational status of a particular version of the component DEPRECATED: Use fields in v1.OperatorStatus instead",
	"version":         "version is the level this availability applies to",
	"updatedReplicas": "updatedReplicas indicates how many replicas are at the desired state",
	"readyReplicas":   "readyReplicas indicates how many replicas are ready and at the desired state",
	"errors":          "errors indicates what failures are associated with the operator trying to manage this version",
	"generations":     "generations allows an operator to track what the generation of \"important\" resources was the last time we updated them",
}

func (VersionAvailability) SwaggerDoc() map[string]string {
	return map_VersionAvailability
}

var map_ClusterVersionOperator = map[string]string{
	"":         "ClusterVersionOperator holds cluster-wide information about the Cluster Version Operator.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "spec is the specification of the desired behavior of the Cluster Version Operator.",
	"status":   "status is the most recently observed status of the Cluster Version Operator.",
}

func (ClusterVersionOperator) SwaggerDoc() map[string]string {
	return map_ClusterVersionOperator
}

var map_ClusterVersionOperatorList = map[string]string{
	"":         "ClusterVersionOperatorList is a collection of ClusterVersionOperators.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "items is a list of ClusterVersionOperators.",
}

func (ClusterVersionOperatorList) SwaggerDoc() map[string]string {
	return map_ClusterVersionOperatorList
}

var map_ClusterVersionOperatorSpec = map[string]string{
	"":                 "ClusterVersionOperatorSpec is the specification of the desired behavior of the Cluster Version Operator.",
	"operatorLogLevel": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
}

func (ClusterVersionOperatorSpec) SwaggerDoc() map[string]string {
	return map_ClusterVersionOperatorSpec
}

var map_ClusterVersionOperatorStatus = map[string]string{
	"":                   "ClusterVersionOperatorStatus defines the observed status of the Cluster Version Operator.",
	"observedGeneration": "observedGeneration represents the most recent generation observed by the operator and specifies the version of the spec field currently being synced.",
}

func (ClusterVersionOperatorStatus) SwaggerDoc() map[string]string {
	return map_ClusterVersionOperatorStatus
}

var map_CRDCompatibilityRequirement = map[string]string{
	"":         "CRDCompatibilityRequirement expresses a set of requirements on a target CRD. It is used to ensure compatibility between different actors using the same CRD.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "spec is the specification of the desired behavior of the CRD Compatibility Requirement.",
	"status":   "status is the most recently observed status of the CRD Compatibility Requirement.",
}

func (CRDCompatibilityRequirement) SwaggerDoc() map[string]string {
	return map_CRDCompatibilityRequirement
}

var map_CRDCompatibilityRequirementList = map[string]string{
	"":         "CRDCompatibilityRequirementList is a collection of CRDCompatibilityRequirements.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "items is a list of CRDCompatibilityRequirements.",
}

func (CRDCompatibilityRequirementList) SwaggerDoc() map[string]string {
	return map_CRDCompatibilityRequirementList
}

var map_CRDCompatibilityRequirementSpec = map[string]string{
	"":                       "CRDCompatibilityRequirementSpec is the specification of the desired behavior of the CRD Compatibility Requirement.",
	"compatibilitySchema":    "compatibilitySchema defines the schema used by crdSchemaValidation and objectSchemaValidation. This field is required.",
	"crdSchemaValidation":    "crdSchemaValidation ensures that updates to the installed CRD are compatible with this compatibility requirement. This field is optional.",
	"objectSchemaValidation": "objectSchemaValidation ensures that matching objects conform to compatibilitySchema. This field is optional.",
}

func (CRDCompatibilityRequirementSpec) SwaggerDoc() map[string]string {
	return map_CRDCompatibilityRequirementSpec
}

var map_CRDCompatibilityRequirementStatus = map[string]string{
	"":            "CRDCompatibilityRequirementStatus defines the observed status of the CRD Compatibility Requirement.",
	"conditions":  "conditions is a list of conditions and their status. Known condition types are Progressing, Admitted, Compatible.",
	"observedCRD": "observedCRD documents the uid and generation of the CRD object when the current status was written. This field will not be emitted if the target CRD does not exist or could not be retrieved.",
	"crdName":     "crdName is the name of the target CRD. The target CRD is not required to exist, as we may legitimately place requirements on it before it is created.  The observed CRD is given in status.observedCRD, which will be empty if no CRD is observed. This field is optional. crdRef must be at most 253 characters in length and must consist only of lower-case alphanumeric characters, periods (.) and hyphens (-). Each period separated label must start and end with an alphanumeric character and be at most 63 characters in length.",
}

func (CRDCompatibilityRequirementStatus) SwaggerDoc() map[string]string {
	return map_CRDCompatibilityRequirementStatus
}

var map_CRDSchemaValidation = map[string]string{
	"":       "CRDSchemaValidation ensures that updates to the installed CRD are compatible with this compatibility requirement.",
	"action": "action determines whether violations are not admitted (Enforce) or admitted with an API warning (Warn). Valid options are:\n  Enforce - incompatible CRDs will be rejected and not admitted to the cluster.\n  Warn - incompatible CRDs will be allowed but a warning will be generated in the API response.\nThis field is required.",
}

func (CRDSchemaValidation) SwaggerDoc() map[string]string {
	return map_CRDSchemaValidation
}

var map_CompatibilitySchema = map[string]string{
	"":                   "CompatibilitySchema defines the schema used by crdSchemaValidation and objectSchemaValidation.",
	"crdYAML":            "crdYAML contains the complete YAML document of the CRD from transport config map. This field is required.",
	"requireVersions":    "requireVersions specifies which versions we will automatically extract from the yaml and require. Valid options are:\n  StorageOnly - only storage version(s) required for compatibility. Users can create/update\n    objects using any served version. additionalVersions are applied on top of this.\n  All - all versions defined in the CRD are required for compatibility.\nThis field is required.",
	"additionalVersions": "additionalVersions is a set of versions to require in addition to those discovered by requireVersions. Overlap with requireVersions is explicitly permitted.",
	"excludeFields":      "excludeFields is a set of fields in the yaml which will not be validated by either crdSchemaValidation or objectSchemaValidation. FIXME(chrischdi): explain the format which is",
}

func (CompatibilitySchema) SwaggerDoc() map[string]string {
	return map_CompatibilitySchema
}

var map_ObjectSchemaValidation = map[string]string{
	"":                  "ObjectSchemaValidation ensures that matching objects conform to compatibilitySchema.",
	"action":            "action determines whether violations are not admitted (Enforce) or admitted with an API warning (Warn). Valid options are:\n  Enforce - incompatible Objects will be rejected and not admitted to the cluster.\n  Warn - incompatible Objects will be allowed but a warning will be generated in the API response.\nThis field is required.",
	"namespaceSelector": "namespaceSelector defines the namespaceSelector field of the resulting ValidatingWebhookConfiguration.",
	"objectSelector":    "objectSelector defines the objectSelector field of the resulting ValidatingWebhookConfiguration.",
	"matchConditions":   "matchConditions defines the matchConditions field of the resulting ValidatingWebhookConfiguration. FIXME(chrischdi): should we embed this type? Or maintain our own copy of MatchCondition?",
}

func (ObjectSchemaValidation) SwaggerDoc() map[string]string {
	return map_ObjectSchemaValidation
}

var map_ObservedCRD = map[string]string{
	"":           "ObservedCRD contains information about the observed target CRD.",
	"uid":        "uid is the uid of the observed CRD.",
	"generation": "generation is the observed generation of the CRD.",
}

func (ObservedCRD) SwaggerDoc() map[string]string {
	return map_ObservedCRD
}

var map_BackupJobReference = map[string]string{
	"":          "BackupJobReference holds a reference to the batch/v1 Job created to run the etcd backup",
	"namespace": "namespace is the namespace of the Job. this is always expected to be \"openshift-etcd\" since the user provided PVC is also required to be in \"openshift-etcd\" Required",
	"name":      "name is the name of the Job. Required",
}

func (BackupJobReference) SwaggerDoc() map[string]string {
	return map_BackupJobReference
}

var map_EtcdBackup = map[string]string{
	"":       "\n\n# EtcdBackup provides configuration options and status for a one-time backup attempt of the etcd cluster\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"spec":   "spec holds user settable values for configuration",
	"status": "status holds observed values from the cluster. They may not be overridden.",
}

func (EtcdBackup) SwaggerDoc() map[string]string {
	return map_EtcdBackup
}

var map_EtcdBackupList = map[string]string{
	"": "EtcdBackupList is a collection of items\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
}

func (EtcdBackupList) SwaggerDoc() map[string]string {
	return map_EtcdBackupList
}

var map_EtcdBackupSpec = map[string]string{
	"pvcName": "pvcName specifies the name of the PersistentVolumeClaim (PVC) which binds a PersistentVolume where the etcd backup file would be saved The PVC itself must always be created in the \"openshift-etcd\" namespace If the PVC is left unspecified \"\" then the platform will choose a reasonable default location to save the backup. In the future this would be backups saved across the control-plane master nodes.",
}

func (EtcdBackupSpec) SwaggerDoc() map[string]string {
	return map_EtcdBackupSpec
}

var map_EtcdBackupStatus = map[string]string{
	"conditions": "conditions provide details on the status of the etcd backup job.",
	"backupJob":  "backupJob is the reference to the Job that executes the backup. Optional",
}

func (EtcdBackupStatus) SwaggerDoc() map[string]string {
	return map_EtcdBackupStatus
}

var map_ImageContentSourcePolicy = map[string]string{
	"":         "ImageContentSourcePolicy holds cluster-wide information about how to handle registry mirror rules. When multiple policies are defined, the outcome of the behavior is defined on each field.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "spec holds user settable values for configuration",
}

func (ImageContentSourcePolicy) SwaggerDoc() map[string]string {
	return map_ImageContentSourcePolicy
}

var map_ImageContentSourcePolicyList = map[string]string{
	"":         "ImageContentSourcePolicyList lists the items in the ImageContentSourcePolicy CRD.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
}

func (ImageContentSourcePolicyList) SwaggerDoc() map[string]string {
	return map_ImageContentSourcePolicyList
}

var map_ImageContentSourcePolicySpec = map[string]string{
	"":                        "ImageContentSourcePolicySpec is the specification of the ImageContentSourcePolicy CRD.",
	"repositoryDigestMirrors": "repositoryDigestMirrors allows images referenced by image digests in pods to be pulled from alternative mirrored repository locations. The image pull specification provided to the pod will be compared to the source locations described in RepositoryDigestMirrors and the image may be pulled down from any of the mirrors in the list instead of the specified repository allowing administrators to choose a potentially faster mirror. Only image pull specifications that have an image digest will have this behavior applied to them - tags will continue to be pulled from the specified repository in the pull spec.\n\nEach “source” repository is treated independently; configurations for different “source” repositories don’t interact.\n\nWhen multiple policies are defined for the same “source” repository, the sets of defined mirrors will be merged together, preserving the relative order of the mirrors, if possible. For example, if policy A has mirrors `a, b, c` and policy B has mirrors `c, d, e`, the mirrors will be used in the order `a, b, c, d, e`.  If the orders of mirror entries conflict (e.g. `a, b` vs. `b, a`) the configuration is not rejected but the resulting order is unspecified.",
}

func (ImageContentSourcePolicySpec) SwaggerDoc() map[string]string {
	return map_ImageContentSourcePolicySpec
}

var map_RepositoryDigestMirrors = map[string]string{
	"":        "RepositoryDigestMirrors holds cluster-wide information about how to handle mirros in the registries config. Note: the mirrors only work when pulling the images that are referenced by their digests.",
	"source":  "source is the repository that users refer to, e.g. in image pull specifications.",
	"mirrors": "mirrors is one or more repositories that may also contain the same images. The order of mirrors in this list is treated as the user's desired priority, while source is by default considered lower priority than all mirrors. Other cluster configuration, including (but not limited to) other repositoryDigestMirrors objects, may impact the exact order mirrors are contacted in, or some mirrors may be contacted in parallel, so this should be considered a preference rather than a guarantee of ordering.",
}

func (RepositoryDigestMirrors) SwaggerDoc() map[string]string {
	return map_RepositoryDigestMirrors
}

var map_OLM = map[string]string{
	"":         "OLM provides information to configure an operator to manage the OLM controllers\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "spec holds user settable values for configuration",
	"status":   "status holds observed values from the cluster. They may not be overridden.",
}

func (OLM) SwaggerDoc() map[string]string {
	return map_OLM
}

var map_OLMList = map[string]string{
	"":         "OLMList is a collection of items\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "items contains the items",
}

func (OLMList) SwaggerDoc() map[string]string {
	return map_OLMList
}

// AUTO-GENERATED FUNCTIONS END HERE
