// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	operatorv1alpha1 "github.com/openshift/api/operator/v1alpha1"
)

// CompatibilitySchemaApplyConfiguration represents a declarative configuration of the CompatibilitySchema type for use
// with apply.
type CompatibilitySchemaApplyConfiguration struct {
	CRDYAML            *string                           `json:"crdYAML,omitempty"`
	RequireVersions    *operatorv1alpha1.RequireVersions `json:"requireVersions,omitempty"`
	AdditionalVersions []string                          `json:"additionalVersions,omitempty"`
	ExcludeFields      []string                          `json:"excludeFields,omitempty"`
}

// CompatibilitySchemaApplyConfiguration constructs a declarative configuration of the CompatibilitySchema type for use with
// apply.
func CompatibilitySchema() *CompatibilitySchemaApplyConfiguration {
	return &CompatibilitySchemaApplyConfiguration{}
}

// WithCRDYAML sets the CRDYAML field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CRDYAML field is set to the value of the last call.
func (b *CompatibilitySchemaApplyConfiguration) WithCRDYAML(value string) *CompatibilitySchemaApplyConfiguration {
	b.CRDYAML = &value
	return b
}

// WithRequireVersions sets the RequireVersions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequireVersions field is set to the value of the last call.
func (b *CompatibilitySchemaApplyConfiguration) WithRequireVersions(value operatorv1alpha1.RequireVersions) *CompatibilitySchemaApplyConfiguration {
	b.RequireVersions = &value
	return b
}

// WithAdditionalVersions adds the given value to the AdditionalVersions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalVersions field.
func (b *CompatibilitySchemaApplyConfiguration) WithAdditionalVersions(values ...string) *CompatibilitySchemaApplyConfiguration {
	for i := range values {
		b.AdditionalVersions = append(b.AdditionalVersions, values[i])
	}
	return b
}

// WithExcludeFields adds the given value to the ExcludeFields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludeFields field.
func (b *CompatibilitySchemaApplyConfiguration) WithExcludeFields(values ...string) *CompatibilitySchemaApplyConfiguration {
	for i := range values {
		b.ExcludeFields = append(b.ExcludeFields, values[i])
	}
	return b
}
